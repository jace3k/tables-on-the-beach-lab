/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.model.Party;
import io.swagger.model.Snack;
import io.swagger.model.Table;
import io.swagger.model.Ticket;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-05T16:18:34.457Z")

@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    @ApiOperation(value = "New order", nickname = "createOrder", notes = "", response = Order.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order created successfully", response = Order.class),
        @ApiResponse(code = 400, message = "Can not create order") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Order> createOrder(@ApiParam(value = "ticket details" ,required=true )  @Valid @RequestBody Order body);


    @ApiOperation(value = "Delete order", nickname = "deleteOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order deleted successfully"),
        @ApiResponse(code = 400, message = "Error while deleting order") })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Get all orders", nickname = "getAllOrders", notes = "", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Orders list", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Orders not found") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> getAllOrders();


    @ApiOperation(value = "Get order by id", nickname = "getOrder", notes = "", response = Order.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order details", response = Order.class),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrder(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Get order parties by id", nickname = "getOrderParty", notes = "", response = Party.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of reserverd parties for given order", response = Party.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/orders/{orderId}/party",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Party>> getOrderParty(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Get order snacks by id", nickname = "getOrderSnacks", notes = "", response = Snack.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of snacks for given order", response = Snack.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Orders not found") })
    @RequestMapping(value = "/orders/{orderId}/snacks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Snack>> getOrderSnacks(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Get order tables by id", nickname = "getOrderTables", notes = "", response = Table.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of tables for given order", response = Table.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/orders/{orderId}/tables",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Table>> getOrderTables(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Get order tickets by id", nickname = "getOrderTickets", notes = "", response = Ticket.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of snacks for given order", response = Ticket.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/orders/{orderId}/tickets",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Ticket>> getOrderTickets(@ApiParam(value = "",required=true) @PathVariable("orderId") Long orderId);

}
