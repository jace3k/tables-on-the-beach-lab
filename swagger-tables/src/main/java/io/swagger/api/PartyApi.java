/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Party;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-05T16:18:34.457Z")

@Api(value = "party", description = "the party API")
public interface PartyApi {

    @ApiOperation(value = "New party reservation", nickname = "createParty", notes = "", response = Party.class, tags={ "party", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Party scheduled successfully", response = Party.class),
        @ApiResponse(code = 400, message = "Can not schedule party") })
    @RequestMapping(value = "/party",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Party> createParty(@ApiParam(value = "Snack details" ,required=true )  @Valid @RequestBody Party body);


    @ApiOperation(value = "Delete party", nickname = "deleteParty", notes = "", tags={ "party", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Party deleted successfully"),
        @ApiResponse(code = 400, message = "Error while deleting party") })
    @RequestMapping(value = "/party/{partyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteParty(@ApiParam(value = "",required=true) @PathVariable("partyId") Long partyId);


    @ApiOperation(value = "Get all parties", nickname = "getAllParties", notes = "", response = Party.class, responseContainer = "List", tags={ "party", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of parties", response = Party.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Parties not found") })
    @RequestMapping(value = "/party",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Party>> getAllParties();


    @ApiOperation(value = "Get party by id", nickname = "getParty", notes = "", response = Party.class, tags={ "party", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Party details", response = Party.class),
        @ApiResponse(code = 404, message = "Party not found") })
    @RequestMapping(value = "/party/{partyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Party> getParty(@ApiParam(value = "",required=true) @PathVariable("partyId") Long partyId);


    @ApiOperation(value = "Update party information", nickname = "updateParty", notes = "", response = Party.class, tags={ "party", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Party updated", response = Party.class),
        @ApiResponse(code = 400, message = "Error while updating party"),
        @ApiResponse(code = 404, message = "Party not found") })
    @RequestMapping(value = "/party/{partyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Party> updateParty(@ApiParam(value = "Party unique identifier",required=true) @PathVariable("partyId") Long partyId);

}
