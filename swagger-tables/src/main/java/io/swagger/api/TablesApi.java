/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Table;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-05T16:18:34.457Z")

@Api(value = "tables", description = "the tables API")
public interface TablesApi {

    @ApiOperation(value = "Create new table", nickname = "createNewTable", notes = "", response = Table.class, tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table created successfully", response = Table.class),
        @ApiResponse(code = 400, message = "Error while creating table") })
    @RequestMapping(value = "/tables",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Table> createNewTable(@ApiParam(value = "Details about the table" ,required=true )  @Valid @RequestBody Table body);


    @ApiOperation(value = "Get all tables", nickname = "getAllTables", notes = "", response = Table.class, responseContainer = "List", tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of Tables details like example below", response = Table.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Tables not found") })
    @RequestMapping(value = "/tables",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Table>> getAllTables();


    @ApiOperation(value = "Get table specified by unique number", nickname = "getTable", notes = "", response = Table.class, tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table details", response = Table.class),
        @ApiResponse(code = 404, message = "Table not found") })
    @RequestMapping(value = "/tables/{tableNo}",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Table> getTable(@ApiParam(value = "Table unique number",required=true) @PathVariable("tableNo") Long tableNo);


    @ApiOperation(value = "Update table information", nickname = "updateTable", notes = "", tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table updated successfully."),
        @ApiResponse(code = 400, message = "Error while updating table") })
    @RequestMapping(value = "/tables/{tableNo}",
        produces = { "application/json" }, 
//        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTable(@ApiParam(value = "Table unique number",required=true) @PathVariable("tableNo") Long tableNo);

}


// TASK: statystyki
// kto jest najczesciej przychodzacym customerem
// ktory stolik jest najczesciej oblegany