/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TableOrder;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-05T16:18:34.457Z")

@Api(value = "tableOrders", description = "the tableOrders API")
public interface TableOrdersApi {

    @ApiOperation(value = "New table order", nickname = "createTableOrder", notes = "", response = TableOrder.class, tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table order created successfully", response = TableOrder.class),
        @ApiResponse(code = 400, message = "Can not create table order") })
    @RequestMapping(value = "/tableOrders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TableOrder> createTableOrder(@ApiParam(value = "Table order details" ,required=true )  @Valid @RequestBody TableOrder body);


    @ApiOperation(value = "Delete order of table", nickname = "deleteTableOrder", notes = "", tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table order deleted successfully"),
        @ApiResponse(code = 400, message = "Error while deleting table order") })
    @RequestMapping(value = "/tableOrders/{tableOrderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTableOrder(@ApiParam(value = "",required=true) @PathVariable("tableOrderId") Long tableOrderId);


    @ApiOperation(value = "Get all table orders", nickname = "getAllTableOrders", notes = "", response = TableOrder.class, responseContainer = "List", tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table order details", response = TableOrder.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Table orders not found") })
    @RequestMapping(value = "/tableOrders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<TableOrder>> getAllTableOrders();


    @ApiOperation(value = "Get table order by id", nickname = "getTableOrder", notes = "", response = TableOrder.class, tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table order details", response = TableOrder.class),
        @ApiResponse(code = 404, message = "Table order not found") })
    @RequestMapping(value = "/tableOrders/{tableOrderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<TableOrder> getTableOrder(@ApiParam(value = "",required=true) @PathVariable("tableOrderId") Long tableOrderId);


    @ApiOperation(value = "Update table order information", nickname = "updateTableOrder", notes = "", response = TableOrder.class, tags={ "table", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Table order updated successfully", response = TableOrder.class),
        @ApiResponse(code = 400, message = "Error while updating table order") })
    @RequestMapping(value = "/tableOrders/{tableOrderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TableOrder> updateTableOrder(@ApiParam(value = "Table order identifier",required=true) @PathVariable("tableOrderId") Long tableOrderId);

}
